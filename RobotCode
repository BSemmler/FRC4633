#include "WPILib.h"
#include <math.h>

class Robot: public IterativeRobot
{
private:
 VictorSP* victorSP4;
 VictorSP* victorSP5;
 // VictorSP 4 and 5 handles driving
 TalonSRX* talonSRX2;
 TalonSRX* talonSRX3; //Talons handle the arm
 Victor* victor6;
 Victor* victor7;
 Victor* victor8;
 Joystick* stick1;
 Joystick* stick2; //controllers for driving
 DigitalInput* actuatorSwitch1;
 DigitalInput* actuatorSwitch2;
 DigitalInput* travelPosition;
 LiveWindow *lw = LiveWindow::GetInstance();
 SendableChooser *chooser;
 const std::string autoNameDefault = "Default";
 const std::string autoNameCustom = "My Auto";
 std::string autoSelected;
 //X-Box Controller Button Layout:
 //A = 1
 //B = 2
 //X = 3
 //Y = 4
 //LB = 5
 //RB = 6
 //Back = 7
 //Start = 8
 //Down on Left Stick = 9
 //Down on Right Stick = 10
 //Right and Left Triggers are considered axis
 //LX Axis= Axis 0
 //LY Axis = Axis 1
 //L Trigger = Axis 2
 //R Trigger = Axis 3
 //RX Axis = Axis 4
 //RY Axis = Axis 5
public:
 Robot()
 {
  victorSP4 = new VictorSP(7);
  victorSP5 = new VictorSP(8);
  talonSRX2 = new TalonSRX(2);
  talonSRX3 = new TalonSRX(3);
  victor6 = new Victor(6);
  victor7 = new Victor(7);
  victor8 = new Victor(8);
  stick1 = new Joystick(0); //sets the controllers
  stick2 = new Joystick(1);
  chooser = new SendableChooser;
  actuatorSwitch1 = new DigitalInput(0);
  actuatorSwitch2 = new DigitalInput(1);
  travelPosition = new DigitalInput(2);
 }

 void RobotInit()

 {
  chooser = new SendableChooser();
  chooser->AddDefault(autoNameDefault, (void*)&autoNameDefault);
  chooser->AddObject(autoNameCustom, (void*)&autoNameCustom);
  SmartDashboard::PutData("Auto Modes", chooser);
 }


 /**
  * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
  * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
  * Dashboard, remove all of the chooser code and uncomment the GetString line to get the auto name from the text box
  * below the Gyro
  *
  * You can add additional auto modes by adding additional comparisons to the if-else structure below with additional strings.
  * If using the SendableChooser make sure to add them to the chooser code above as well.
  */
 void AutonomousInit()
 {
  autoSelected = *((std::string*)chooser->GetSelected());
  //std::string autoSelected = SmartDashboard::GetString("Auto Selector", autoNameDefault);
  std::cout << "Auto selected: " << autoSelected << std::endl;

  if(autoSelected == autoNameCustom){
   //Custom Auto goes here
  } else {
   //Default Auto goes here
  }
 }

 void AutonomousPeriodic()
 {
  if(autoSelected == autoNameCustom){
   //Custom Auto goes here
  } else {
   //Default Auto goes here
  }
 }
 float Sensitivity(float a, float b)
 	 {
 		 if (a < 0.15 && a > -0.15) {return 0;}
 		 if(stick1->GetRawButton(5))
 		 {
 			 a = (a + a + b)/3;
 		 }

 		 a = (cbrt(a)+2.0*a*a*a)/3.0;
 		 if(stick1->GetRawButton(6))
 		 {
 			 a = a/2;
 			 return a;
 		 }
 		 else
 		 {
 			return a;
 		 }
 	 }
 void ArmMotion(int n, int z)
 {
	if(stick2->GetRawAxis(3) == 1 || stick2->GetRawAxis(3) == 1)
	{
		if(n == 1)
		{
			victor6->Set(1);
		}
		else
		{
			victor6->Set(0);
		}
	}
	else if(stick2->GetRawAxis(2) == 1 || stick2->GetRawAxis(2) == 1)
	{
		if( z== 1)
		{
			victor6->Set(-1);
		}
		else
		{
			victor6->Set(0);
		}
	}
	else
	{
		victor6->Set(0);
	}
 }
 void armDownStep()
 {
	 if(stick1->GetRawButton(1) || stick2->GetRawButton(1))
	 {
		 victor6->Set(-1);
		 Wait(0.5);
		 while(actuatorSwitch2 == 1 && travelPosition == 1)
		 {
			 victor6->Set(-1);
		 }
		 victor6->Set(0);
	 }
 }
void armUpStep()
{
	if(stick1->GetRawButton(1) || stick2->GetRawButton(1))
	{
		victor6->Set(1);
		Wait(0.5);
		while(actuatorSwitch1 == 1 && travelPosition == 1)
		{
			victor6->Set(1);
		}
		victor6->Set(0);
	}
}
 void ShootOrIntake()
 {
  if(stick2->GetRawButton(6))
  {
   talonSRX2->Set(1); Wait(1);
   talonSRX3->Set(1);
  }
  else if(stick2->GetRawButton(5))
  {
   talonSRX2->Set(-1);
   talonSRX3->Set(-1);
  }
  else
  {
   talonSRX2->Set(0);
   talonSRX3->Set(0);
  }
 }
 void TeleopInit()
 {

 }

 void TeleopPeriodic()
 {
  victorSP4->Set(Sensitivity(stick1->GetRawAxis(1),stick1->GetRawAxis(5)) * -1);
  victorSP5->Set(Sensitivity(stick1->GetRawAxis(5),stick1->GetRawAxis(1)) * 1);
  ShootOrIntake();
  int ArmFullyExtended = actuatorSwitch1;
  int ArmFullyRetracted = actuatorSwitch2;
  ArmMotion(ArmFullyExtended, ArmFullyRetracted);





  Wait(0.05); //used to move
 }

 void TestPeriodic()
 {
  lw->Run();
 }
};

START_ROBOT_CLASS(Robot)
