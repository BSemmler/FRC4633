//all these includes are probably not needed, but whatever

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/videoio.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/imgproc.hpp"
#include <iostream>

using namespace cv;
using namespace std;

/*

int main(int argc, char** argv)
{
	Mat temp;
	Mat image;
	namedWindow("Demon emulator", CV_WINDOW_AUTOSIZE);

	//image = imread("Yes.png", CV_LOAD_IMAGE_COLOR);
	
	int threshold_value = 0;
	int red_value = 0;
	int blue_value = 0;
	int green_value = 0;
	// 0:B
	// 1:G
	// 2:R
	VideoCapture video(0);
	video.set(CAP_PROP_BRIGHTNESS, 11);
	video.set(CAP_PROP_CONTRAST, 11);
	video.set(CAP_PROP_SATURATION, 11);

	while (1)
	{
		video >> image;
		createTrackbar("Red", "Demon emulator", &red_value, 255);
		createTrackbar("Blue", "Demon emulator", &blue_value, 255);
		createTrackbar("Green", "Demon emulator", &green_value, 255);
		//cvThreshold(&image, &image, threshold_value, 255, 0);
		for (int i = 100; i < 540; i++)
		{
			if (red_value == 0 && blue_value == 0 && green_value == 0) { break; }
			for (int j = 100; j < 380; j++)
			{
				if (image.at<Vec3b>(j, i)[0] < blue_value) { image.at<Vec3b>(j, i)[0] = 255; image.at<Vec3b>(j, i)[1] = 255; image.at<Vec3b>(j, i)[2] = 255; }
				if (image.at<Vec3b>(j, i)[1] < green_value) { image.at<Vec3b>(j, i)[0] = 255; image.at<Vec3b>(j, i)[1] = 255; image.at<Vec3b>(j, i)[2] = 255; }
				if (image.at<Vec3b>(j, i)[2] < red_value) { image.at<Vec3b>(j, i)[0] = 255; image.at<Vec3b>(j, i)[1] = 255; image.at<Vec3b>(j, i)[2] = 255; }
				if (image.at<Vec3b>(j, i)[0] != 255 || image.at<Vec3b>(j, i)[1] != 255 || image.at<Vec3b>(j, i)[2] != 255)
				{
					image.at<Vec3b>(j, i)[0] = 0; image.at<Vec3b>(j, i)[1] = 0; image.at<Vec3b>(j, i)[2] = 0;
				}
			}
		
		imshow("Demon emulator", image);
		
		waitKey(1);
	}
	



	//cvFindContours(image, image, CV_RETR_LIS)

}
*/
int main(int argc, char** argv)
{
	Mat temp;
	Mat image;
	namedWindow("Demon emulator", CV_WINDOW_AUTOSIZE);

	//image = imread("Yes.png", CV_LOAD_IMAGE_COLOR);

	int threshold_value = 0;
	int bright_value = 0;
	int contrast_value = 0;
	int sat_value = 0;
	int exp_value = 0;
	int autoexp_value = 0;
	// 0:B
	// 1:G
	// 2:R
	VideoCapture video(1);

	while (1)
	{
		
		createTrackbar("BRIGHTNESS", "Demon emulator", &bright_value, 255);
		createTrackbar("CONTRAST", "Demon emulator", &contrast_value, 255);
		createTrackbar("SATURATION", "Demon emulator", &sat_value, 255);
		createTrackbar("EXPOSURE", "Demon emulator", &exp_value, 255);
		createTrackbar("AUTO", "Demon emulator", &autoexp_value, 255);

		video.set(CAP_PROP_BRIGHTNESS, bright_value);
		video.set(CAP_PROP_CONTRAST, contrast_value);
		video.set(CAP_PROP_SATURATION, sat_value);
		video.set(CAP_PROP_EXPOSURE, exp_value -150);
		video.set(CAP_PROP_EXPOSURE, autoexp_value-50);
		video >> image;
		imshow("Demon emulator", image);

		waitKey(1);
	}

	/*
	lowest brightness
	lowest whitebalance
	max sat
	lowest exposure
	max contrast
	lowest auto
	
	
	
	*/


	//cvFindContours(image, image, CV_RETR_LIS)

}
